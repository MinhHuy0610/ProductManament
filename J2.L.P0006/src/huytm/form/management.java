/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package huytm.form;

import huytm.daos.CategoryDAO;
import huytm.daos.ProductDAO;
import huytm.dtos.CategoryDTO;
import huytm.dtos.ProductDTO;
import java.sql.SQLException;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author acer
 */
public class management extends javax.swing.JFrame {

    /**
     * Creates new form manage
     */
    static Vector<ProductDTO> listProduct;
    static Vector<CategoryDTO> listCategory;
    boolean addNew = false;
    boolean addNewPro = false;
    
    public management() {
        initComponents();
        loadSupplier();
        setCombobox();
        loadProduct();
    }
    public boolean checkCatCodeDuplicate(String catCode) {
        listCategory = CategoryDAO.getCategories();
        for (CategoryDTO catDTO : listCategory) {
            if (catCode.equalsIgnoreCase(catDTO.getCategoryID())) {
                return true;
            }
        }
        return false;
    }
    
    public void loadSupplier() {
        listCategory = CategoryDAO.getCategories();
        Vector data = new Vector();
        Vector header = new Vector();
        header.add("Category ID");
        header.add("Category name");
        header.add("Description");

        for (CategoryDTO cat : listCategory) {
            Vector row = new Vector();
            row.add(cat.getCategoryID());
            row.add(cat.getCategoryName());
            row.add(cat.getDescription());            
            data.add(row);

        }
        DefaultTableModel model = (DefaultTableModel) tblCatogory.getModel();
        model.setDataVector(data, header);
     }
    public static void setCombobox(){
        listProduct = ProductDAO.getProduct();
        listCategory= CategoryDAO.getCategories();
        Vector<String> list = new Vector<>();
        
        for (CategoryDTO cat : listCategory){
            list.addElement(cat.getCategoryID() + "-" + cat.getCategoryName());
        }
        DefaultComboBoxModel dc=new DefaultComboBoxModel(list);
        cbCategoryName.setModel(dc);
    }
    public static void loadProduct(){
        listProduct = ProductDAO.getProduct();
        listCategory =CategoryDAO.getCategories();
        Vector header = new Vector();
        Vector data = new Vector();
        header.add("Product ID");
        header.add("Product name");
        header.add("Unit");
        header.add("Quantity");
        header.add("Price");
        header.add("Category ID");
        for (ProductDTO product : listProduct ){
            String catName = "";
            for(CategoryDTO cat: listCategory){
                if(product.getCatogoryid().equals(cat.getCategoryID())){
                    catName = cat.getCategoryName();
                    break;
                }
            }
            Vector row = new Vector();
            
            row.add(product.getProductID());
            row.add(product.getProductName());
            row.add(product.getUnit());
            row.add(product.getQuantity());
            row.add(product.getPrice());
            row.add(product.getCatogoryid() + "-" + catName);
            data.add(row);
        }
        DefaultTableModel model = (DefaultTableModel) tblProduct.getModel();
        model.setDataVector(data, header);
    }
    public  boolean cheackProductIdDuplicate(String proID){
        listProduct = ProductDAO.getProduct();
        for (ProductDTO proDTO : listProduct){
            if(proID.equalsIgnoreCase(proDTO.getProductID())){
                return true;
            }
        }
        return false;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCatogory = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtCategoryID = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtCatogoryName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtDescription = new javax.swing.JTextField();
        btnAddNewCat = new javax.swing.JButton();
        btnSaveCat = new javax.swing.JButton();
        btnDeleteCat = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblProduct = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        txtProductID = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtProductName = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        cbCategoryName = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        txtUnit = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtQuantity = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtPrice = new javax.swing.JTextField();
        btnProAddNew = new javax.swing.JButton();
        btnProSave = new javax.swing.JButton();
        btnProDelete = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTabbedPane1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Main part:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        tblCatogory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblCatogory.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblCatogoryMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblCatogory);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Detailed part:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Category ID:");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Category Name:");

        txtCatogoryName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCatogoryNameActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Description:");

        btnAddNewCat.setText("Add new");
        btnAddNewCat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddNewCatActionPerformed(evt);
            }
        });

        btnSaveCat.setText("Save");
        btnSaveCat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveCatActionPerformed(evt);
            }
        });

        btnDeleteCat.setText("Delete");
        btnDeleteCat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteCatActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAddNewCat)
                    .addComponent(jLabel3)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addComponent(txtCategoryID, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(txtDescription, javax.swing.GroupLayout.DEFAULT_SIZE, 224, Short.MAX_VALUE)
                                    .addComponent(txtCatogoryName)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSaveCat)
                                .addGap(69, 69, 69)
                                .addComponent(btnDeleteCat)))))
                .addGap(44, 44, 44))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCategoryID, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtCatogoryName, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(71, 71, 71)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddNewCat)
                    .addComponent(btnSaveCat)
                    .addComponent(btnDeleteCat))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 429, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 450, Short.MAX_VALUE))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Category", jPanel1);

        jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Main Part:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        tblProduct.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblProduct.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblProductMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblProduct);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Detailed part:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Product ID:");

        txtProductID.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Product Name:");

        txtProductName.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtProductName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtProductNameActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("Category name:");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setText("Unit:");

        txtUnit.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jLabel8.setText("Quantity:");

        txtQuantity.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel9.setText("Price:");

        txtPrice.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        btnProAddNew.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnProAddNew.setText("Add New");
        btnProAddNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProAddNewActionPerformed(evt);
            }
        });

        btnProSave.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnProSave.setText("Save");
        btnProSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProSaveActionPerformed(evt);
            }
        });

        btnProDelete.setText("Delete");
        btnProDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel4))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtProductName)
                            .addComponent(txtProductID)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9)
                            .addComponent(btnProAddNew))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(btnProSave)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                                .addComponent(btnProDelete))
                            .addComponent(cbCategoryName, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtUnit)
                            .addComponent(txtQuantity)
                            .addComponent(txtPrice))))
                .addGap(0, 20, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtProductID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(txtProductName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(cbCategoryName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel7)
                    .addComponent(txtUnit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(60, 60, 60)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnProSave)
                    .addComponent(btnProAddNew)
                    .addComponent(btnProDelete))
                .addGap(23, 23, 23))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 523, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 20, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addGap(29, 29, 29))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Product", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 924, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        jTabbedPane1.getAccessibleContext().setAccessibleName("Catogory");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtCatogoryNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCatogoryNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCatogoryNameActionPerformed

    private void btnAddNewCatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddNewCatActionPerformed
        addNew = true;
        txtCategoryID.setEnabled(true);
        txtCategoryID.setText("");
        txtCategoryID.requestFocus();
        txtCatogoryName.setText("");
        txtDescription.setText("");
    }//GEN-LAST:event_btnAddNewCatActionPerformed

    private void btnSaveCatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveCatActionPerformed
        String catID = txtCategoryID.getText();
        String catName = txtCatogoryName.getText();
        String description = txtDescription.getText();
        if(addNew){
            try{
                if (txtCategoryID.getText().isEmpty()){
                    JOptionPane.showMessageDialog(null, "Please input Category ID");
                    return;
                } else if (checkCatCodeDuplicate(catID)){
                    JOptionPane.showMessageDialog(null, "Category ID is duplicated");
                    return;
                } else if(txtCatogoryName.getText().isEmpty()){
                    JOptionPane.showMessageDialog(null, "Please input Category name");
                    return;
                } else if(txtDescription.getText().isEmpty()){
                    JOptionPane.showMessageDialog(null, "Please input description");
                    return;
                }
                if (CategoryDAO.insertCatogory(catID, catName, description) != 0){
                    JOptionPane.showMessageDialog(null, "Add successfull");
                    loadSupplier();
                    txtCategoryID.setText("");
                    txtCatogoryName.setText("");
                    txtDescription.setText("");
                    addNew = false;
                    setCombobox();
                    loadProduct();
                }
            }catch(SQLException ex){
                if(ex.getMessage().contains("Cannot insert duplicate key")){
                    JOptionPane.showMessageDialog(null, "Category ID duplicated");
                }
            }
        }else{
            if (txtCategoryID.getText().equals("")){
                JOptionPane.showMessageDialog(null, "Please choose Category");
                return;
            }else if (txtCatogoryName.getText().isEmpty()){
                JOptionPane.showMessageDialog(null, "Please input Category name");
                return;
            }else if(txtDescription.getText().isEmpty()){
                JOptionPane.showMessageDialog(null, "Please input description");
                return;
            }if (CategoryDAO.updateCatogory(catID, catName, description) != 0){
                JOptionPane.showMessageDialog(null, "Update successfull");
                    loadSupplier();
                    txtCategoryID.setText("");
                    txtCatogoryName.setText("");
                    txtDescription.setText("");
                    txtCategoryID.setEnabled(false);
                    setCombobox();
                    loadProduct();
                    
            }
        }
    }//GEN-LAST:event_btnSaveCatActionPerformed

    private void btnDeleteCatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteCatActionPerformed
        if (txtCategoryID.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Please choose Category");
            return ;
        }
        int pos = tblCatogory.getSelectedRow();
        String catCode = (String) tblCatogory.getValueAt(pos, 0);
        if (JOptionPane.showConfirmDialog(null, "Are you sure to delete ?", "", JOptionPane.YES_NO_OPTION) == 0) {
            try {
                if(CategoryDAO.deleteCatogory(catCode) != 0 ){
                    JOptionPane.showMessageDialog(null, "Delete successfull");
                    loadSupplier();
                    txtCategoryID.setText("");
                    txtCatogoryName.setText("");
                    txtDescription.setText("");
                    txtCategoryID.setEnabled(false);
                }
            }catch (SQLException ex){
                if (ex.getMessage().contains("The DELETE statement conflicted with the REFERENCE constraint")) {
                    JOptionPane.showMessageDialog(null, "You must delete Product before delete Catogory");

                }
            }
        }
    }//GEN-LAST:event_btnDeleteCatActionPerformed

    private void tblCatogoryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblCatogoryMouseClicked
        addNew = false ;
        txtCategoryID.setEnabled(false);
        int pos = tblCatogory.getSelectedRow();
        listCategory = CategoryDAO.getCategories();
        CategoryDTO cat = new CategoryDTO();
        
        String catID = (String) tblCatogory.getValueAt(pos, 0);
        txtCategoryID.setText(catID);
        String catName = (String) tblCatogory.getValueAt(pos, 1);
        txtCatogoryName.setText(catName);
        String description = (String) tblCatogory.getValueAt(pos, 2);
        txtDescription.setText(description);
        for (CategoryDTO catDTO : listCategory) {
            if(catID.equals(catDTO.getCategoryID())){
                cat = catDTO;
                break;
            }
        }
    }//GEN-LAST:event_tblCatogoryMouseClicked

    private void txtProductNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtProductNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtProductNameActionPerformed

    private void btnProSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProSaveActionPerformed
        String productID = txtProductID.getText();
        String productName = txtProductName.getText();
        String unit = txtUnit.getText();
        String category = (String) cbCategoryName.getSelectedItem();
        String categoryID = category.split("-")[0];
        if(addNewPro){
            if(txtProductID.getText().isEmpty()){
                JOptionPane.showMessageDialog(null, "Please input Product ID");
                return;
            } else if (cheackProductIdDuplicate(productID)){
                JOptionPane.showMessageDialog(null, "Product ID is duplicate");
                return;
            } else if (txtProductName.getText().isEmpty()){
                JOptionPane.showMessageDialog(null, "Please input Product name");
                return;
            } else if (txtUnit.getText().isEmpty()){
                JOptionPane.showMessageDialog(null, "Please input unit");
                return;
            } else if (txtPrice.getText().isEmpty()){
                JOptionPane.showMessageDialog(null, "Please input price");
                return;
            } else if (txtQuantity.getText().isEmpty()){
                JOptionPane.showMessageDialog(null, "Please input quantity");
                return;
            }
            try {
                float price =  Float.parseFloat(txtPrice.getText());
                int quantity = Integer.parseInt(txtQuantity.getText());
                if(price < 0) {
                    JOptionPane.showMessageDialog(null, "Price must equal or greater than 0");
                    return;
                } else if (quantity < 0) {
                    JOptionPane.showMessageDialog(null, "Quantity must equal or greater than 0");
                    return;
                }
                if(ProductDAO.insertProduct(productID, productName, unit, price, quantity, categoryID) != 0){
                    JOptionPane.showMessageDialog(null, "Added successful");
                    loadProduct();
                    txtProductID.setText("");
                    txtProductName.setText("");
                    txtUnit.setText("");
                    txtQuantity.setText("");
                    txtPrice.setText("");
                    cbCategoryName.setSelectedIndex(0);
                    addNewPro = false ;                    

                }
            }catch (Exception ex){
                if (ex.getMessage().contains("Cannot insert duplicate key")) {
                    JOptionPane.showMessageDialog(null, "Product ID duplicated");
                } else {
                    JOptionPane.showMessageDialog(null, "Price invalid");
                }
            }
        }else {
            if (txtProductID.getText().equals("")){
                JOptionPane.showMessageDialog(null, "Please choose Product");
                return;
            } else if (txtProductName.getText().isEmpty()){
                JOptionPane.showMessageDialog(null, "Please input Product name");
                return;
            } else if (txtUnit.getText().isEmpty()){
                JOptionPane.showMessageDialog(null, "Please input unit");
                return;
            } else if (txtPrice.getText().isEmpty()){
                JOptionPane.showMessageDialog(null, "Please input price");
                return;
            } else if (txtQuantity.getText().isEmpty()){
                JOptionPane.showMessageDialog(null, "Please input quantity");
                return;
            }
            try {
                float price =  Float.parseFloat(txtPrice.getText());
                int quantity = Integer.parseInt(txtQuantity.getText());
                if(price < 0) {
                    JOptionPane.showMessageDialog(null, "Price must equal or greater than 0");
                    return;
                } else if (quantity < 0) {
                    JOptionPane.showMessageDialog(null, "Quantity must equal or greater than 0");
                    return;
                }
                if (ProductDAO.updateProduct(productID, productName, unit, price, quantity, categoryID) != 0){
                    JOptionPane.showMessageDialog(null, "Update successful");
                    loadProduct();
                    txtProductID.setText("");
                    txtProductID.setEnabled(false);
                    txtProductName.setText("");
                    txtUnit.setText("");
                    txtQuantity.setText("");
                    txtPrice.setText("");
                    cbCategoryName.setSelectedIndex(0); 
                    
                }
            }catch (Exception ex){
                JOptionPane.showMessageDialog(null, "Price invalid");
            }
        }
    }//GEN-LAST:event_btnProSaveActionPerformed

    private void tblProductMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblProductMouseClicked
        addNewPro = false;
        txtProductID.setEnabled(false);
        int pos = tblProduct.getSelectedRow();
        listProduct = ProductDAO.getProduct();
        
        if(pos >= 0){
            String productID = (String) tblProduct.getValueAt(pos, 0);
            String productName = (String) tblProduct.getValueAt(pos, 1);
            String unit = (String) tblProduct.getValueAt(pos, 2);
            int quantity = (int) tblProduct.getValueAt(pos, 3);
            float price = (float) tblProduct.getValueAt(pos, 4);
            String categoryid =(String) tblProduct.getValueAt(pos, 5);
            
            txtProductID.setText(productID);
            txtProductName.setText(productName);
            DefaultComboBoxModel dc = (DefaultComboBoxModel) cbCategoryName.getModel();
            dc.setSelectedItem(categoryid);
            txtUnit.setText(unit);
            txtQuantity.setText(String.valueOf(quantity));
            txtPrice.setText(String.valueOf(price));
            
            
        }
    }//GEN-LAST:event_tblProductMouseClicked

    private void btnProAddNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProAddNewActionPerformed
        listCategory = CategoryDAO.getCategories();
        if(listCategory.isEmpty()){
            JOptionPane.showMessageDialog(null, "You must have category");
            return;
        }
        addNewPro = true ;
        txtProductID.setText("");
        txtProductID.requestFocus();
        txtProductID.setEnabled(true);
        txtProductName.setText("");
        txtUnit.setText("");
        txtQuantity.setText("");
        txtPrice.setText("");
        cbCategoryName.setSelectedIndex(0);
        
    }//GEN-LAST:event_btnProAddNewActionPerformed

    private void btnProDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProDeleteActionPerformed
        if(txtProductID.getText().equals("")){
            JOptionPane.showMessageDialog(null, "Pleasse choose Product");
            return;
        }
        int pos = tblProduct.getSelectedRow();
        if (JOptionPane.showConfirmDialog(null, "Are you sure to delete ?", "", JOptionPane.YES_NO_OPTION) == 0) {
            if ( pos >= 0 ){
                String productID = (String) tblProduct.getValueAt(pos, 0);
                if(ProductDAO.deleteProduct(productID) != 0){
                    JOptionPane.showMessageDialog(null, "Delete successfull");
                    loadProduct();
                    txtProductID.setText("");
                    txtProductName.setText("");
                    txtUnit.setText("");
                    txtQuantity.setText("");
                    txtPrice.setText("");
                    cbCategoryName.setSelectedIndex(0);
                }
            }
        }

    }//GEN-LAST:event_btnProDeleteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(management.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(management.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(management.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(management.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new management().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddNewCat;
    private javax.swing.JButton btnDeleteCat;
    private javax.swing.JButton btnProAddNew;
    private javax.swing.JButton btnProDelete;
    private javax.swing.JButton btnProSave;
    private javax.swing.JButton btnSaveCat;
    public static javax.swing.JComboBox<String> cbCategoryName;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable tblCatogory;
    public static javax.swing.JTable tblProduct;
    private javax.swing.JTextField txtCategoryID;
    private javax.swing.JTextField txtCatogoryName;
    private javax.swing.JTextField txtDescription;
    private javax.swing.JTextField txtPrice;
    private javax.swing.JTextField txtProductID;
    private javax.swing.JTextField txtProductName;
    private javax.swing.JTextField txtQuantity;
    private javax.swing.JTextField txtUnit;
    // End of variables declaration//GEN-END:variables
}
